@prefix sh: <http://www.w3.org/ns/shacl#> .
@prefix ex: <http://example.org/robotics#> .
@prefix xsd: <http://www.w3.org/2001/XMLSchema#> .
@prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#> .

# Robot Shape - Validation rules for Robot class
ex:RobotShape
    a sh:NodeShape ;
    sh:targetClass ex:Robot ;
    rdfs:label "Robot Shape" ;
    rdfs:comment "Validation constraints for robots" ;

    # Every robot must have a serial number
    sh:property [
        sh:path ex:hasSerialNumber ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:datatype xsd:string ;
        sh:pattern "^[A-Z]{2}[0-9]{6}$" ;
        sh:message "Robot must have exactly one serial number in format XX000000" ;
    ] ;

    # Weight must be positive
    sh:property [
        sh:path ex:hasWeight ;
        sh:datatype xsd:float ;
        sh:minExclusive 0.0 ;
        sh:maxInclusive 5000.0 ;
        sh:message "Robot weight must be between 0 and 5000 kg" ;
    ] ;

    # Must be located somewhere
    sh:property [
        sh:path ex:locatedAt ;
        sh:minCount 1 ;
        sh:maxCount 1 ;
        sh:class ex:Location ;
        sh:message "Robot must be located at exactly one location" ;
    ] ;

    # Can have multiple sensors but at least one
    sh:property [
        sh:path ex:hasComponent ;
        sh:minCount 1 ;
        sh:class ex:Sensor ;
        sh:message "Robot must have at least one sensor component" ;
    ] .

# Sensor Shape - Validation rules for Sensor class
ex:SensorShape
    a sh:NodeShape ;
    sh:targetClass ex:Sensor ;
    rdfs:label "Sensor Shape" ;
    rdfs:comment "Validation constraints for sensors" ;

    # Accuracy must be between 0 and 100 percent
    sh:property [
        sh:path ex:hasAccuracy ;
        sh:datatype xsd:float ;
        sh:minInclusive 0.0 ;
        sh:maxInclusive 100.0 ;
        sh:message "Sensor accuracy must be between 0 and 100 percent" ;
    ] .

# Camera Sensor Shape - Additional constraints for cameras
ex:CameraSensorShape
    a sh:NodeShape ;
    sh:targetClass ex:CameraSensor ;
    rdfs:label "Camera Sensor Shape" ;
    rdfs:comment "Validation constraints specific to camera sensors" ;

    # Camera resolution property
    sh:property [
        sh:path ex:hasResolution ;
        sh:datatype xsd:string ;
        sh:pattern "^[0-9]+x[0-9]+$" ;
        sh:message "Camera resolution must be in format WIDTHxHEIGHT" ;
    ] ;

    # Minimum accuracy for cameras
    sh:property [
        sh:path ex:hasAccuracy ;
        sh:minInclusive 70.0 ;
        sh:message "Camera sensors must have at least 70% accuracy" ;
    ] .

# Lidar Sensor Shape - Additional constraints for lidar
ex:LidarSensorShape
    a sh:NodeShape ;
    sh:targetClass ex:LidarSensor ;
    rdfs:label "Lidar Sensor Shape" ;
    rdfs:comment "Validation constraints specific to lidar sensors" ;

    # Range property
    sh:property [
        sh:path ex:hasRange ;
        sh:datatype xsd:float ;
        sh:minExclusive 0.0 ;
        sh:maxInclusive 1000.0 ;
        sh:message "Lidar range must be between 0 and 1000 meters" ;
    ] ;

    # Higher accuracy requirement for lidar
    sh:property [
        sh:path ex:hasAccuracy ;
        sh:minInclusive 85.0 ;
        sh:message "Lidar sensors must have at least 85% accuracy" ;
    ] .

# Autonomous Robot Shape - Constraints for autonomous robots
ex:AutonomousRobotShape
    a sh:NodeShape ;
    sh:targetClass ex:AutonomousRobot ;
    rdfs:label "Autonomous Robot Shape" ;
    rdfs:comment "Validation constraints for autonomous robots" ;

    # Must have both camera and lidar for autonomous operation
    sh:property [
        sh:path ex:hasComponent ;
        sh:qualifiedValueShape [
            sh:class ex:CameraSensor ;
        ] ;
        sh:qualifiedMinCount 1 ;
        sh:message "Autonomous robot must have at least one camera sensor" ;
    ] ;

    sh:property [
        sh:path ex:hasComponent ;
        sh:qualifiedValueShape [
            sh:class ex:LidarSensor ;
        ] ;
        sh:qualifiedMinCount 1 ;
        sh:message "Autonomous robot must have at least one lidar sensor" ;
    ] .

# Task Shape - Validation rules for tasks
ex:TaskShape
    a sh:NodeShape ;
    sh:targetClass ex:Task ;
    rdfs:label "Task Shape" ;
    rdfs:comment "Validation constraints for tasks" ;

    # Task must have a name
    sh:property [
        sh:path rdfs:label ;
        sh:minCount 1 ;
        sh:datatype xsd:string ;
        sh:message "Task must have a name (rdfs:label)" ;
    ] ;

    # Optional priority level
    sh:property [
        sh:path ex:hasPriority ;
        sh:datatype xsd:integer ;
        sh:minInclusive 1 ;
        sh:maxInclusive 10 ;
        sh:message "Task priority must be between 1 (low) and 10 (high)" ;
    ] .

# Location Shape - Validation rules for locations
ex:LocationShape
    a sh:NodeShape ;
    sh:targetClass ex:Location ;
    rdfs:label "Location Shape" ;
    rdfs:comment "Validation constraints for locations" ;

    # Coordinates if specified
    sh:property [
        sh:path ex:hasLatitude ;
        sh:datatype xsd:float ;
        sh:minInclusive -90.0 ;
        sh:maxInclusive 90.0 ;
        sh:message "Latitude must be between -90 and 90 degrees" ;
    ] ;

    sh:property [
        sh:path ex:hasLongitude ;
        sh:datatype xsd:float ;
        sh:minInclusive -180.0 ;
        sh:maxInclusive 180.0 ;
        sh:message "Longitude must be between -180 and 180 degrees" ;
    ] ;

    # If latitude is present, longitude must be too
    sh:sparql [
        sh:message "If latitude is specified, longitude must also be specified" ;
        sh:prefixes ex: ;
        sh:select """
            SELECT $this WHERE {
                $this ex:hasLatitude ?lat .
                FILTER NOT EXISTS { $this ex:hasLongitude ?lon }
            }
        """ ;
    ] .

# Cross-class constraint: Industrial robots cannot be humanoid
ex:IndustrialRobotConstraint
    a sh:NodeShape ;
    sh:targetClass ex:IndustrialRobot ;
    rdfs:label "Industrial Robot Constraint" ;
    rdfs:comment "Industrial robots cannot also be humanoid robots" ;

    sh:sparql [
        sh:message "Industrial robots cannot also be classified as humanoid robots" ;
        sh:prefixes ex: ;
        sh:select """
            SELECT $this WHERE {
                $this a ex:IndustrialRobot .
                $this a ex:HumanoidRobot .
            }
        """ ;
    ] .
