version: '3.8'

services:
  csneps-core:
    build:
      context: ..
      dockerfile: docker/Dockerfile.csneps
    container_name: csneps-core
    ports:
      - "3000:3000"    # CSNePS GUI
      - "50051:50051"  # gRPC server
    environment:
      - CSNEPS_PORT=3000
      - GRPC_PORT=50051
      - LOG_LEVEL=INFO
      - CSNEPS_KB_FILE=resources/sample-kb.edn
    volumes:
      - ../data:/app/data
      - ../src/csneps-core/resources:/app/resources
    networks:
      - csri-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  python-bridge:
    build:
      context: ..
      dockerfile: docker/Dockerfile.python
    container_name: python-bridge
    ports:
      - "8080:8080"
    environment:
      - ADAPTER_TYPE=slam
      - CSNEPS_HOST=csneps-core
      - CSNEPS_PORT=50051
      - LOG_LEVEL=INFO
    depends_on:
      - csneps-core
    networks:
      - csri-network
    volumes:
      - ../data:/app/data
    restart: unless-stopped

  web-ui:
    build:
      context: ../src/webui
      dockerfile: Dockerfile
    container_name: csri-web-ui
    ports:
      - "8090:8080"
    environment:
      - API_ENDPOINT=http://csneps-core:3000
      - GRPC_ENDPOINT=csneps-core:50051
    depends_on:
      - csneps-core
    networks:
      - csri-network
    restart: unless-stopped

  # Development services
  jupyter:
    image: jupyter/scipy-notebook:latest
    container_name: csri-jupyter
    ports:
      - "8888:8888"
    environment:
      - JUPYTER_ENABLE_LAB=yes
    volumes:
      - ../data:/home/jovyan/data
      - ../docs:/home/jovyan/docs
      - ../examples:/home/jovyan/examples
    networks:
      - csri-network
    profiles:
      - dev

  # Database for persistence (optional)
  redis:
    image: redis:7-alpine
    container_name: csri-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - csri-network
    profiles:
      - persistence

  # Monitoring services
  prometheus:
    image: prom/prometheus:latest
    container_name: csri-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    networks:
      - csri-network
    profiles:
      - monitoring

  grafana:
    image: grafana/grafana:latest
    container_name: csri-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    networks:
      - csri-network
    profiles:
      - monitoring

networks:
  csri-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

volumes:
  redis_data:
  prometheus_data:
  grafana_data:

# Usage examples:
# Start core services:        docker-compose up
# Start with development:     docker-compose --profile dev up
# Start with monitoring:      docker-compose --profile monitoring up
# Start everything:           docker-compose --profile dev --profile monitoring --profile persistence up
